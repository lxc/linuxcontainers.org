title: LXC 3.1 リリースのお知らせ
date: 2018/12/13 00:00
origin: https://discuss.linuxcontainers.org/t/lxc-3-1-has-been-released/3527
content: |-
  ### はじめに <!-- Introduction -->
  <!--
  The LXC team is pleased to announce the release of LXC 3.1.0!
  -->
  LXC チームは LXC 3.1 のリリースをおしらせできることをうれしく思います！

  <!--
  This is an intermediary feature release and not one of our major LTS releases or LTS bugfix releases. We plan on doing more of those in the future, but note that support on those releases will be limited as we mostly focus on LTS for production environments.
  -->
  これは、メジャーな LTS や LTS のバグフィックスのためのリリースではなく、それに向けての中間的な新機能を盛り込んだリリースです。将来的にはこの作業をさらに進める予定です。しかし、このリリースのサポートは限定的なものになります。これは、開発の大部分はプロダクション環境向けの LTS リリースにフォーカスしているためです。
  
  ### 新機能 <!-- New features -->
  #### AppArmor でのいくつかの再マウントオプションの有効化 <!-- enable various remount options with AppArmor -->
  <!--
  Read-write bind mounts need to be restricted for some paths in order to avoid MAC restriction bypasses, but read-only bind mounts shouldn't have that problem. Additionally, combinations of `nosuid`, `nodev` and `noexec` flags shouldn't be a problem either and are required with newer systemd versions, so let's allow those as long as they're combined with `ro,remount,bind`.
  -->
  読み書き可能なバインドマウントは MAC 制限をすり抜けるのを防ぐために、一部のパスで制限する必要があります。しかし、読み込み専用のバインドマウントではこのような問題はありません。さらに `nosuid`、`nodev`、`noexec` フラグの組み合わせでも問題となることはなく、この組み合わせは新しいバージョンの systemd で必要になります。このような理由から、これらのオプションと `ro,remount,bind` との組み合わせではマウントを許可します。
  
  #### `NETLINK_DUMP_STRICT_CHK` のサポート<!-- support `NETLINK_DUMP_STRICT_CHK` -->
  <!--
  Make use of the new socket option, `NETLINK_DUMP_STRICT_CHK`, that userspace can use via `setsockopt()` to request strict checking of headers and attributes on dump requests.
  -->
  ユーザースペースから `setsockopt()` 経由で使える、新しいソケットオプションである `NETLINK_DUMP_STRICT_CHK` を使って、ダンプリクエスト時にヘッダーと属性の厳密なチェックを要求できます。

  <!--
  To get dump features such as kernel side filtering based on data in the header or attributes appended to the dump request, userspace must call `setsockopt()` for `NETLINK_DUMP_STRICT_CHK` and a non-zero value. This is necessary to make use of the `IFA_TARGET_NETNSID` property used to efficiently retrieve information from network namespaces by LXC.
  -->
  ダンプリクエストに追加するヘッダーや属性のデータをもとにしたカーネル側のフィルタリングのようなダンプ機能を利用するには、ユーザースペースは `NETLINK_DUMP_STRICT_CHK` と 0 でない値で `setsockopt()` を呼ばなければなりません。これは LXC がネットワーク名前空間から情報を効率的に取得するのに使う `IFA_TARGET_NETNSID` の利用に必要です。
  
  #### コンテナ起動時の新たなキーリング割り当て <!-- allocate new keyring on startup -->
  <!--
  To isolate and protect the hosts keyring each LXC container will try to allocate a new keyring for itself on startup.
  -->
  ホストのキーリングを隔離して保護するために、LXC コンテナはそれぞれ、起動時に新しいキーリングを割り当てようとします。
  
  #### 完全な `cgroup2` のサポート <!-- full `cgroup2` support -->
  <!--
  LXC has supported `cgroup2` for a while now without adhering to its strict delegation model. Now, LXC is ready to fully support it.
  -->
  LXC はしばらくの間、厳密な権限委譲モデルを守らずに `cgroup2` をサポートしてきました。現在は `cgroup2` をフルにサポートしました。
  
  #### コンテナからネットワークデバイスとアドレスを取得する効率的な方法の実装 <!-- implement efficient way to retrieve network devices and addresses from containers -->
  <!--
  Based on kernel work done by the LXD team it is now possible to query a network namespace without having to perform costly `fork()` and `setns()` syscalls. Instead, the network namespace is identified by a network namespace identifier. As such a new network namespace aware version and very improved and safe version of `getifaddrs()` named `netns_getifaddrs()` is introduced that LXC uses. It is a strict superset of `getifaddrs()`.
  -->
  LXD チームが行ったカーネルでの作業によって、コストのかかる `fork()` や `setns()` システムコールを実行する必要なく、ネットワーク名前空間を問い合わせることができるようになりました。代わりに、ネットワーク名前空間はネットワーク名前空間識別子を使って識別します。LXC は、このような新しいネットワーク名前空間が使えるバージョンと、`getifaddrs()` を非常に改良し安全になったバージョンである `netns_getifaddrs()` を使うようになりました。これは `getifaddrs()` の厳格なスーパーセットです。
  
  #### API に `lxc_has_api_extension()` を追加 <!-- introduce `lxc_has_api_extension()` into the API -->
  <!--
  Going forward each new API addition will be given a unique name that can be passed to `lxc_has_api_extension()`. This is modeled after LXD's API extension checks. This allows API users to query the given LXC instance whether a given API extension is supported.
  -->
  今後実装される新しい API が追加されるたびに、`lxc_has_api_extension()` に与えるユニークな名前が与えられます。これは LXD の API 拡張のチェックをモデルにしています。これにより、API ユーザーが特定の API 拡張がサポートされているかどうかを LXC インスタンスに問い合わせることができるようになります。
  
  #### `lxc.cgroup.relative` 設定キーの追加 <!-- add `lxc.cgroup.relative` configuration key -->
  <!--
  This adds the new `lxc.cgroup.relative` config key. The key can be used to instruct LXC to never escape to the root cgroup. This makes it easy for users to adhere to restrictions enforced by `cgroup2` and `systemd`. Specifically, this makes it possible to run LXC containers as systemd services.
  -->
  新たに設定項目として `lxc.cgroup.relative` を追加しました。この設定で LXC に root cgroup へエスケープしないように指示できます。これにより、ユーザーは `cgroup2` と `systemd` が強制する制限を遵守するのが容易になります。具体的には、LXC コンテナを systemd サービスとして実行できます。

  #### （コンテナ）起動時の新しいネットワーク名前空間識別子の割り当て <!-- allocate new network namespace identifier on startup -->
  <!--
  Each container will now have a unique network namespace identifier assigned on startup. This can be used by LXC to siginficantly speed up operations performed on network namespaces (e.g. network device configuration and retrieval).
  -->
  コンテナごとに、起動時に割り当てるユニークなネットワーク名前空間識別子を持つようになりました。LXC はこれを使い、ネットワーク名前空間上で実行する操作を大幅にスピードアップします。（ネットワークデバイスの設定や取得）。
  
  #### `lxc.rootfs.managed` 設定キーの追加 <!-- add `lxc.rootfs.managed` configuration key -->
  <!--
  This introduces a new config key which can be used to indicate whether this LXC instance is managing the container storage. If LXC is not managing the storage then LXC will not modify the container storage. For example, an API call to `c->destroy(c)` will then run any destroy hooks but will not destroy the actual rootfs (Unless, of course, the hook does so behind LXC's back.).
  -->
  LXC インスタンスがコンテナストレージを管理しているかどうかを示すために使える新しい設定キーを追加しました。LXC がストレージを管理していない場合、LXC はコンテナストレージ変更しません。例えば、API `c->destroy(c)` を呼び出すと、destroy フックが実行されますが、実際に rootfs は削除しません（もちろん、フックが LXC の背後でそのような処理を実行しない限り）。
  
  #### すべての `VLA` の削除 <!-- removal of all `VLA`s -->
  <!--
  LXC is now compiled with `-Wvla` by default.
  -->
  LXC はデフォルトで `-Wvla` を付けてコンパイルされるようになりました。
  
  #### AppArmor プロファイルの生成 <!-- AppArmor profile generation -->
  <!--
  This copies lxd's AppArmor profile generation. This tries to detect features such as cgroup namespaces, AppArmor namespaces and stacking support, and has profile parts conditionally for unprivileged containers.
  -->
  この機能は lxd の AppArmor プロファイル生成機能のコピーです。この機能は、cgroup 名前空間、AppArmor 名前空間とスタッキングのサポートのような機能を検出しようとします。そして条件付きで、プロファイルの非特権コンテナ向けのパーツを持ちます。

  <!--
  This introduces the following changes to the configuration:
  -->
  これにより、次のように設定が変更されます:

   - `lxc.apparmor.profile = generated`  
      'generated' という固定値を設定するとこの機能を使います。設定しない場合、次の設定で明示的に指定しない限りは、機能的な変更はありません <!-- The fixed value 'generated' will cause this functionality to be used, otherwise there should be no functional changes happening unless specifically requested with the next key. -->
   - `lxc.apparmor.allow_nesting`  
      これは真偽値を設定します。有効な場合、次のような変更が行われます: generated な AppArmor プロファイルが使われる場合、ネストしたコンテナを使うのに必要な変更が含まれます。通常のマウントポイントに加えて、`lxcfs` のオーバーレイなしで、`/dev/.lxc/proc` と `/dev/.lxc/sys` が `procfs` と `sysfs` のマウントポイントに含まれます。generated な AppArmor プロファイルが使われている場合は、直接読み書きはできません <!-- This is a boolean which, if enabled, causes the following changes: When generated AppArmor profiles are used, they will contain the necessary changes to allow creating a nested container. In addition to the usual mount points, `/dev/.lxc/proc` and `/dev/.lxc/sys` will contain `procfs` and `sysfs` mount points without the `lxcfs` overlays, which, if generated AppArmor profiles are being used, will not be read/writable directly. -->
   - `lxc.apparmor.raw`  
     プロファイルに加える、生の AppArmor プロファイル行のリストです。generated なプロファイルを使っているときのみ有効です <!-- A list of raw AppArmor profile lines to append to the profile. Only valid when using generated profiles. -->

  <!--
  In order for `apparmor_parser`'s cache to be of use, this adds a
  `--with-apparmor-cache-dir` `./configure` option.
  -->
  `apparmor_parser` のキャッシュを使うために、`./configure` オプションに `--with-apparmor-cache-dir` を追加します。

  #### マウントを挿入する API の追加 <!-- add mount injection api -->
  <!--
  This work has been done as part of the bachelor thesis of [LizaTretyakova](https://github.com/LizaTretyakova). The team is very happy and thankful for this outstanding work!
  -->
  この作業は、[LizaTretyakova](https://github.com/LizaTretyakova) の学士論文の一部としてなされました。開発チームは、この素晴らしい仕事についてとてもハッピーですし、感謝もしています!

  <!--
  Being able to dynamically interact with mounts while a container is running has been a long-standing request from users and something we have supported in LXD for a long time now. This feature enables the following main use-cases:
  -->
  コンテナの実行中に、動的にマウントを操作できることは、ユーザーからの長年の要望で、LXD では長い間サポートされてきた機能でした。この機能は主に次のような使用例を可能にします:
  
  
   - 実行中のコンテナに対してマウントを挿入する <!-- Injecting a mount into a running container -->  
     この機能により、ユーザーはコンテナに動的にマウントを追加できます。例えば、ディスクスペースが足りなくなる前にコンテナに新たに専用のストレージデバイスを追加するようなことです。 <!-- This lets users dynamically add mounts to a container. An example would be adding a new dedicated storage device to the container before it runs out of disk space. -->
   - デバイスのホットプラグが可能に <!-- Enabling device hotplug -->  
     コンテナに新しいデバイスを追加するためには、コンテナの実行中にマウントを操作することが必要です。具体的には、`CAP_MKNOD` のようなデバイスノードを作成できるケーパビリティが落とされているような特権コンテナや、非特権コンテナはデバイスを作成できません。このようなデバイスは、ホストの名前空間上でホスト上の十分な特権を持ったプロセスによって作成され、コンテナにマウントとして挿入されることが必要です。 <!-- Interacting with mounts at container runtime is also necessary in order to add new devices to containers. Specifically, any privileged container that has dropped capabilities that would allow it to create device nodes (e.g. `CAP_MKNOD)` or any unprivileged container will not be able to create devices. This requires that such devices are created by a sufficiently privileged process on the host inside the host's namespaces and then injected as mounts into the container. -->

  <!--
  To this end two new API calls have been added:
  -->
  この目的で、新たにふたつの API 呼び出しが追加されました:
  
      int (*mount)(struct lxc_container *c, const char *source, const char *target,
                          const char *filesystemtype, unsigned long mountflags, const void *data,
                          struct lxc_mount *mnt);
      
      int (*umount)(struct lxc_container *c, const char *target, unsigned long mountflags,
                            struct lxc_mount *mnt);
  
  #### `lxc.monitor.signal.pdeath` の追加 <!-- add `lxc.monitor.signal.pdeath` configuration key -->
  <!--
  Set the signal to be sent to the container's init when the lxc monitor exits. By default it is set to `SIGKILL` which will cause all container processes to be killed when the lxc monitor process dies. To ensure that containers stay alive even if lxc monitor dies set this to `0`.
  -->
  lxc モニタープロセスが exit した際に、コンテナの init に送るシグナルを設定します。デフォルトでは `SIGKILL` が設定されています。つまり、lxc モニタープロセスが死んだ場合は、コンテナのプロセスすべてが kill されることになります。lxc モニタープロセスが死んでもコンテナを起動したままにしておきたい場合はこれを `0` にセットします。
  
  #### `liblxc` の共有と静的ライブラリのビルド <!-- build a shared and static `liblxc` library -->
  <!--
  LXC will now by default build both a shared and a static library.
  -->
  デフォルトで、LXC では共有と静的の両方のライブラリがビルドされるようになりました。
  
  #### Linux カーネル 4.18 で行われた `mknod()` の変更への適応 <!-- adapt to `mknod()` changes in Linux Kernel 4.18 -->
  <!--
  Starting with commit
  -->
  
      55956b59df33 ("vfs: Allow userns root to call mknod on owned filesystems.")

  <!--
  Linux will allow `mknod()` in user namespaces for userns root if `CAP_MKNOD` is available.
      However, these device nodes are useless since
  -->
  上のコミットで、Linux では、`CAP_MKNOD` が有効な場合は、ユーザー名前空間内の root による `mknod()` ができるようになりました。
  しかし、これで作られたデバイスノードは実用になりません。なぜなら、
  
      static struct super_block *alloc_super(struct file_system_type *type, int flags,
                                             struct user_namespace *user_ns)
      {
              /* <snip> */
  
              if (s->s_user_ns != &init_user_ns)
                      s->s_iflags |= SB_I_NODEV;
  
              /* <snip> */
      }

  <!--
  will set the `SB_I_NODEV` flag on the filesystem. When a device node created in non-init userns is `open()`ed the call chain will hit:
  -->
  が、ファイルシステムに `SB_I_NODEVE` を設定するからです。init のユーザー名前空間以外で作られたデバイスノードが `open()` されるとき、次の呼び出しにヒットします:
  
      bool may_open_dev(const struct path *path)
      {
              return !(path->mnt->mnt_flags & MNT_NODEV) &&
                      !(path->mnt->mnt_sb->s_iflags & SB_I_NODEV);
      }

  <!--
  which will cause an `EPERM` because the device node is located on an fs owned by non-init-userns and thus doesn't grant access to device nodes due to `SB_I_NODEV`. LXC has learned to correctly handle this case.
  -->
  これにより `EPERM` が発生します。なぜなら、デバイスノードは非 init のユーザー名前空間が所有するファイルシステム上に存在し、`SB_I_NODEV` により、デバイスノードへのアクセスが許可されないからです。LXC は、このケースを正しく扱うようになりました。
  
  #### アプリケーションコンテナの実行に `execveat()` を使用 <!-- use `execveat()` to execute application containers -->
  <!--
  Application containers rely on a minimal init system to run their workloads. Instead of executing it by opening a file that is bind-mounted into the container simply pass a file descriptor to `execveat()`. This makes application container startup safer and simpler.
  -->
  アプリケーションコンテナは、そのワークロードを実行するために、最小限の機能を持つ init システムに依存します。コンテナ内にバインドマウントしたファイルを開くことでアプリケーションコンテナを実行する代わりに、シンプルに `execveat()` にファイルディスクリプタを渡します。これにより、アプリケーションコンテナがより安全にシンプルに起動します。
  
  #### ロギング時のスレッドごとのコンテナ名出力が可能に <!-- enable per-thread container name prefix when logging -->
  <!--
  Now each thread that runs a different container but shares a single log file can be identified by printing the name of the container into the log.
  -->
  異なるコンテナを実行しているが、単一のログファイルを共有しているスレッドはそれぞれ、コンテナ名をログに出力することで識別できるようになりました。
  
  #### cgroup の扱いのリファクタリング <!-- refactor cgroup handling -->
  <!--
  This replaces the constructor implementation of cgroup handling with a simpler, thread-safe on-demand model of cgroup driver initialization.
  Making the cgroup initialization code run in a constructor means that each time the shared library gets mapped the cgroup parsing code gets run. That was unnecessary overhead. The cleaner implementation is to allocate a cgroup driver on demand whenever it is needed.
  -->
  cgroup のコンストラクタ実装を、よりシンプルで、スレッドセーフなオンデマンドモデルの cgroup ドライバーの初期化モデルに置き換えました。
  cgroup 初期化コードをコンストラクタ内で実行することは、共有ライブラリがマップされるたびに cgroup をパースするコードが走ることを意味します。これは不要なオーバーヘッドでした。よりクリーンな実装は、必要になったときにオンデマンドで cgroup ドライバーを割り当てることです。
  
  #### フック実行時に ambient ケーパビリティを上げる <!-- raise ambient capabilities when running hooks -->
  <!--
  In very restricted containers (e.g. unprivileged containers that only run with a single mapping for a non-root user) it was not possible to perform operations that require privilege during startup.
  By raising ambient capabilities when a hook is run it is possible to preserve privileges across `exec`.
  -->
  非常に制限されたコンテナ（例えば、単一の root 以外のユーザーにのみマッピングされて実行している非特権コンテナ）では、起動時に特権が必要な操作を実行できませんでした。
  フックの実行時に ambient ケーパビリティを上げることで、`exec` を超えて特権を維持できます。
  
  #### 非特権コンテナ内で `/sys` を `rw` でマウント可能に <!-- allow to mount `/sys` `rw` in unprivileged containers -->
  <!--
  With new kernel work done by the LXD team it is now possible to send uevents inside user namespaces. This means it is time to let `udev` run inside containers. A pre-condition for this is that `/sys` is mounted `rw`. If it is not `udev` will refuse to start.
  -->
  LXD チームによる新しいカーネルへの取り組みにより、ユーザー名前空間内へ uevent を送ることができるようになりました。これは、コンテナ内で `udev` が実行できるようになったことを意味します。この前提条件は、`/sys` が `rw` でマウントされていることです。そうでなければ、`udev` は起動を拒否します。
  
  #### `strlcpy()` と `strlcat()` を追加、`strncpy()` と `strncat()` を廃止 <!-- add `strlcpy()` and `strlcat()` and deprecate `strncpy()` and `strncat()` -->
  <!--
  This makes string handling safer as `strlcat()` and `strlcpy()` always return a valid string and allow to properly check for truncation.
  -->
  `strlcat()` と `strlcpy()` は常に有効な文字列を返し、適切に切り詰めのチェックができますので、文字列の扱いがより安全になりました。
  
  #### コンパイラベースのハードニング <!-- compiler based hardening -->
  <!--
  By default `LXC` will turn on  variety of compiler hardening options  such as:
  -->
  デフォルトで、`LXC` は次のようなコンパイラが持つ様々なハードニングのオプションを有効にします:
  
      -Wimplicit-fallthrough
      -Wcast-align
      -Wstrict-prototypes
      -fstack-clash-protection
      -fstack-protector-strong
      --mcet -fcf-protection
      -Werror=implicit-function-declaration
  
  #### スレッドセーフに関する改良 <!-- thread-safety improvements -->
  <!--
  The codebase has been further hardended to be usable in multi-threaded environments
  -->
  コードベースはマルチスレッド環境で使えるように、より強化されました。
  
  #### seccomp: アーキテクチャースタッキングのサポート <!-- support architecture stacking -->
  <!--
  This allows to support e.g. the following use-case and more:
  -->
  例えば次のようなケースなどをサポートできるようになりました:
  
   - 32bit コンテナを実行する 64bit カーネルと 64bit ユーザースペース <!-- 64bit kernel and 64bit userspace running 32bit containers -->
   - 64bit コンテナを実行する 64bit カーネルと 32bit ユーザースペース <!-- 64bit kernel and 32bit userspace running 64bit containers -->
   - 64bit コンテナを実行する 32bit コンテナを実行する 64bit カーネルと 64bit ユーザースペース <!-- 64bit kernel and 64bit userspace running 32bit containers running 64bit containers -->
   - ...
  
  #### コンテナ内に `uid 0` がないアプリケーションコンテナのサポート <!-- support application containers without `uid 0` in the container -->
  <!--
  This allows to start containers that do not have a mapping for `uid 0` inside of the container. 
  Here's an example config:
  -->
  コンテナ内の `uid 0` に対するマッピングを持たないコンテナが起動できるようになりました。
  サンプルの設定は次のようなものです:
  
      lxc.include = /usr/share/lxc/config/common.conf
      lxc.include = /usr/share/lxc/config/userns.conf
      lxc.arch = linux64
      lxc.rootfs.path = dir:/home/brauner/.local/share/lxc/c1/rootfs
      lxc.uts.name = c1
      lxc.net.0.type = empty
      lxc.hook.mount =
      
      # ホスト上の uid, gid 1000 のみがコンテナ内の uid, gid 1001 にマップされる
      lxc.idmap = u 1001 1000 1
      lxc.idmap = g 1001 1000 1
      
      # コンテナ内の uid, gid を 1001 に切り替える
      lxc.init.uid = 1001
      lxc.init.gid = 1001
  
  #### `gid` マウントオプションがないカーネル上での `devpts` マウントのサポート <!-- support `devpts` mounts on kernels without `gid` mount option -->
  <!--
  Older kernels do not support the `gid` mount option to grant access to a specific group. LXC will now handle this case automatically and only add `gid = 5` if the `gid` mount option is supported by the kernel.
  -->
  古いカーネルは特定のグループへのアクセスを許可するための `gid` マウントオプションをサポートしません。LXC はこのケースを自動的に扱い、カーネルで `gid` マウントオプションがサポートされている場合のみ、`gid = 5` を追加します。
  
  ### バグ修正 <!-- Bugfixes -->
  <!--
  LXC 3.1.0 includes all the same bugfixes as LXC 3.0.1, 3.0.2 and 3.0.3.
  -->
  LXC 3.1.0 は LXC 3.0.1、3.0.2、3.0.3 と同じバグ修正がすべて含まれています。
  
  ### サポートとアップグレード <!-- Support and upgrade -->
  <!--
  LXC 3.1 isn't a LTS release and so will only be supported until such time as LXC 3.2 is released. We recommend users that need a stronger support commitment to stay on one of our LTS releases.
  -->
  LXC 3.1 は LTS リリースではありません。したがって、LXC 3.2 がリリースされるまでのみサポートされます。強力なサポートのコミットが必要なユーザーは LTS リリースを使い続けることをおすすめします。
  
  ### ダウンロード <!-- Downloads -->
   - LXC リリース tarball <!-- LXC release tarball -->: [lxc-3.1.0.tar.gz](https://linuxcontainers.org/downloads/lxc/lxc-3.1.0.tar.gz) (GPG: [lxc-3.1.0.tar.gz.asc](https://linuxcontainers.org/downloads/lxc/lxc-3.1.0.tar.gz.asc))
  
